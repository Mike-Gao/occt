puts "============"
puts "OCC28091"
puts "============"
puts ""
######################################################
# Crash in Boolean operation in OCCT 6.7.0 version
######################################################

plane pl11 -233.33225716327877000000 218.81370849900000000000 38.81370849900000100000 1.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000
pcylinder cyl11 pl11 4.99956267577179330000 265.33225716344583000000

plane pl12 55.00000000016706300000 218.81370849900000000000 38.81370849900000100000 1.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000
pcylinder cyl12 pl12 4.99956267577179330000 265.33225716344583000000

plane pl31 -233.33225716327877000000 196.18629150100000000000 16.18629150099999900000 1.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000
pcylinder cyl31 pl31 4.99956256930665170000 265.33225716344583000000

plane pl32 55.00000000016706300000 196.18629150100000000000 16.18629150099999900000 1.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000
pcylinder cyl32 pl32 4.99956256930665170000 265.33225716344583000000

plane pl51 38.81370849916703500000 218.81370849900000000000 288.33225716344583000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000 -1.00000000000000000000 0.00000000000000568434 0.00000000000000000000
pcylinder cyl51 pl51 4.99956267585773520000 265.33225716344583000000

plane pl52 38.81370849916703500000 218.81370849900000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000 -1.00000000000000000000 0.00000000000000568434 0.00000000000000000000
pcylinder cyl52 pl52 4.99956267585773520000 265.33225716344583000000

plane pl71 16.18629150116709100000 196.18629150100000000000 288.33225716344583000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000 -1.00000000000000000000 0.00000000000000000000 0.00000000000000000000
pcylinder cyl71 pl71 4.99956256941085450000 265.33225716344583000000

plane pl72 16.18629150116709100000 196.18629150100000000000 0.00000000000000000000 0.00000000000000000000 0.00000000000000000000 -1.00000000000000000000 -1.00000000000000000000 0.00000000000000000000 0.00000000000000000000
pcylinder cyl72 pl72 4.99956256941085450000 265.33225716344583000000

plane pl91 -231.31783334409064000000 100.00000000000000000000 147.61588621456340000000 0.90707526697824048000 0.00000000000000000000 -0.42096847867311143000 -0.42096847867311143000 0.00000000000001136868 -0.90707526697824048000
pcylinder cyl91 pl91 4.99956264091252310000 265.33225716344583000000

plane pl92 27.50000000050937400000 100.00000000000000000000 27.49999999984113700000 0.90707526697824048000 0.00000000000000000000 -0.42096847867311143000 -0.42096847867311143000 0.00000000000001136868 -0.90707526697824048000
pcylinder cyl92 pl92 4.99956264091252310000 265.33225716344583000000

binrestore [locate_data_file bug28091_BenchLeg.brep] sh

compound CmpdSrcFList

foreach ff [ explode sh f ] {
  settolerance $ff 1.0e-7
  fixshape rf $ff
  add rf CmpdSrcFList
}

puts ""
puts ""

set i 0
foreach x {1 3 5 7 9} {
  incr i
  
  copy CmpdSrcFList sshape
  foreach cyf [explode cyl${x}1 f] {
    mksurface sf $cyf;
    if { [ string first "Cylindr" [ dump sf ] ]  >= 0 } {
      bsection r${i}1 sshape $cyf -n2d -na
      break
    }
  }
  
  copy CmpdSrcFList sshape
  foreach cyf [explode cyl${x}2 f] {
    mksurface sf $cyf;
    if { [ string first "Cylindr" [ dump sf ] ]  >= 0 } {
      bsection r${i}2 sshape $cyf -n2d -na
      break
    }
  }
}


# The true number of entities is not important.
# The main idea is to check if:
#   1. The result (r*) is empty or not.
#   2. new interfered entities are found or
#       if some interferences are not detected but was
#       detected earlier.
#
# Changes in behavior at least in one item must be considered (most likely)
# as regression.

checknbshapes r11 -vertex 3
checknbshapes r12 -vertex 0
checknbshapes r21 -vertex 7
checknbshapes r22 -vertex 0
checknbshapes r31 -vertex 7
checknbshapes r32 -vertex 0
checknbshapes r41 -vertex 3
checknbshapes r42 -vertex 0
checknbshapes r51 -vertex 3
checknbshapes r52 -vertex 0