#include <stdio.h>
#include <stdlib.h>
# define U(x) x
# define NLSTATE yyprevious=YYNEWLINE
# define BEGIN yybgin = yysvec + 1 +
# define INITIAL 0
# define YYLERR yysvec
# define YYSTATE (yyestate-yysvec-1)
# define YYOPTIM 1
# ifndef YYLMAX 
# define YYLMAX BUFSIZ
# endif 
#ifndef __cplusplus
# define output(c) (void)putc(c,yyout)
#else
# define lex_output(c) (void)putc(c,yyout)
#endif

#if defined(__cplusplus) || defined(__STDC__)

#if defined(__cplusplus) && defined(__EXTERN_C__)
extern "C" {
#endif
	int yyback(int *, int);
	int yyinput(void);
	int yylook(void);
	void yyoutput(int);
	int yyracc(int);
	int yyreject(void);
	void yyunput(int);
	int yylex(void);
#ifdef YYLEX_E
	void yywoutput(wchar_t);
	wchar_t yywinput(void);
#endif
#ifndef yyless
	int yyless(int);
#endif
#ifndef yywrap
	int yywrap(void);
#endif
#ifdef LEXDEBUG
	void allprint(char);
	void sprint(char *);
#endif
#if defined(__cplusplus) && defined(__EXTERN_C__)
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
//	void exit(int);
#ifdef __cplusplus
}
#endif

#endif
# define unput(c) {yytchar= (c);if(yytchar=='\n')yylineno--;*yysptr++=yytchar;}
# define yymore() (yymorfg=1)
#ifndef __cplusplus
# define input() (((yytchar=yysptr>yysbuf?U(*--yysptr):getc(yyin))==10?(yylineno++,yytchar):yytchar)==EOF?0:yytchar)
#else
# define lex_input() (((yytchar=yysptr>yysbuf?U(*--yysptr):getc(yyin))==10?(yylineno++,yytchar):yytchar)==EOF?0:yytchar)
#endif
#define ECHO fprintf(yyout, "%s",yytext)
# define REJECT { nstr = yyreject(); goto yyfussy;}
int yyleng;
#define YYISARRAY
char yytext[YYLMAX];
int yymorfg;
extern char *yysptr, yysbuf[];
int yytchar;
FILE *yyin = {stdin}, *yyout = {stdout};
extern int yylineno;
struct yysvf { 
	struct yywork *yystoff;
	struct yysvf *yyother;
	int *yystops;};
struct yysvf *yyestate;
extern struct yysvf yysvec[], *yybgin;

#pragma warning(push)
#pragma warning (disable:4244)
#pragma warning (disable:4274)
#pragma warning (disable:4706)
#pragma warning (disable:4701)

# line 4 "exptocas.l"
/* File:	exptocas.l                     */

# line 5 "exptocas.l"
/* Created:	Thu Oct 28 12:21:16 1999       */

# line 6 "exptocas.l"
/* Author:	Andrey BETENEV                 */

# line 7 "exptocas.l"
/* 		<abv@doomox.nnov.matra-dtv.fr> */

# line 8 "exptocas.l"
/* Copyright:	Matra Datavision 1999          */


# line 10 "exptocas.l"
/*****************************************************************************\

This LEX scanner is performs lexical analysis of EXPRESS schema file   
for EXPRESS -> CASCADE/XSTEP classes generator                             

On the stage of lexical scanner comments (single- and multi-line),         
definitions of CONSTANT, FUNCTION, RULE items and clauses WHERE, INVERSE
and DERIVE of TYPE amd ENTITY items are dismissed (ignored)         

Then, keywords such as ENTITY, SUPERTYPE, SET etc., names of items         
and special symbols are identified and returned to parser (yacc) as tokens 

Also, error processing and current line number tracking functions are defined

\*****************************************************************************/


# line 26 "exptocas.l"
/************************************/

# line 27 "exptocas.l"
/* Section 1                        */

# line 28 "exptocas.l"
/* definitions                      */

#include <stdlib.h>
#include <string.h>

#include <TColStd_HSequenceOfHAsciiString.hxx>
#include <Express_HSequenceOfField.hxx>
#include <Express_HSequenceOfItem.hxx>
#include <Express_Field.hxx>
#include <Express_Item.hxx>
#include <Express_Type.hxx>
#include <Express_Schema.hxx>
#include <Express_Reference.hxx>

#include "expparse.h"       /* define tokens */


# line 44 "exptocas.l"
/* Auxiliary functions */

static int fun_level=0;
static int ec_linenum=1;
static int ec_state = 0;

int yywrap(void) { return 1; }

int ec_curline ( void )
{
  return ec_linenum;
}

int ec_error ( char *s, char *text )
{
  printf ( "\nError at line %d: %s \"%s\"\n", ec_curline(), s, text );
  return 0;
}

# define TYP 2
# define ENT 4
# define COMM 6
# define SKP 8
# define RULE 10
# define FUN 12


# line 73 "exptocas.l"
/************************************/

# line 74 "exptocas.l"
/* Section 2                        */

# line 75 "exptocas.l"
/* parsing rules                    */
# define YYNEWLINE 10
int yylex(){
int nstr; extern int yyprevious;
#ifdef __cplusplus
/* to avoid CC and lint complaining yyfussy not being used ...*/
static int __lex_hack = 0;
if (__lex_hack) goto yyfussy;
#endif
while((nstr = yylook()) >= 0)
yyfussy: switch(nstr){
case 0:
if(yywrap()) return(0); break;
case 1:

# line 79 "exptocas.l"
              { /* Eat line comments */ }
break;
case 2:

# line 80 "exptocas.l"
                { ec_state = YYSTATE; BEGIN(COMM); }
break;
case 3:

# line 81 "exptocas.l"
             { /* Eat multiline comments */ }
break;
case 4:

# line 82 "exptocas.l"
          { BEGIN(ec_state); }
break;
case 5:

# line 84 "exptocas.l"
            { return yylval.num = KSCHEM; }
break;
case 6:

# line 85 "exptocas.l"
        { return yylval.num = KENDS; }
break;
case 7:

# line 87 "exptocas.l"
              { BEGIN(TYP); return yylval.num = KTYP; }
break;
case 8:

# line 88 "exptocas.l"
 { BEGIN(0);   return yylval.num = KENDT; }
break;
case 9:

# line 90 "exptocas.l"
            { BEGIN(ENT); return yylval.num = KENT; }
break;
case 10:

# line 91 "exptocas.l"
{ BEGIN(0);  return yylval.num = KENDE; }
break;
case 11:

# line 93 "exptocas.l"
      case 12:

# line 94 "exptocas.l"
       case 13:

# line 95 "exptocas.l"
    { BEGIN(SKP); }
break;
case 14:

# line 96 "exptocas.l"
              { /* eat contents of WHERE and DERIVE subclauses of ENTITY and TYPE */ }
break;
case 15:

# line 98 "exptocas.l"
            { return yylval.num = KSEL; }
break;
case 16:

# line 99 "exptocas.l"
       { return yylval.num = KENUM; }
break;
case 17:

# line 100 "exptocas.l"
              { return yylval.num = KLIST; }
break;
case 18:

# line 101 "exptocas.l"
             { return yylval.num = KARR; }
break;
case 19:

# line 102 "exptocas.l"
               { return yylval.num = KSET; }
break;
case 20:

# line 103 "exptocas.l"
               { return yylval.num = KBAG; }
break;
case 21:

# line 104 "exptocas.l"
                { return yylval.num = KOF; }
break;
case 22:

# line 106 "exptocas.l"
            { return yylval.num = KNUM; }
break;
case 23:

# line 107 "exptocas.l"
           { return yylval.num = KINT; }
break;
case 24:

# line 108 "exptocas.l"
              { return yylval.num = KDBL; }
break;
case 25:

# line 109 "exptocas.l"
            { return yylval.num = KSTR; }
break;
case 26:

# line 110 "exptocas.l"
           { return yylval.num = KLOG; }
break;
case 27:

# line 111 "exptocas.l"
           { return yylval.num = KBOOL; }
break;
case 28:

# line 113 "exptocas.l"
          { return yylval.num = KOPT; }
break;
case 29:

# line 114 "exptocas.l"
            { return yylval.num = KUNIQ; }
break;
case 30:

# line 115 "exptocas.l"
              { return yylval.num = KSELF; }
break;
case 31:

# line 117 "exptocas.l"
          { return yylval.num = KABSTR; }
break;
case 32:

# line 118 "exptocas.l"
           { return yylval.num = KSUBT; }
break;
case 33:

# line 119 "exptocas.l"
         { return yylval.num = KSPRT; }
break;
case 34:

# line 120 "exptocas.l"
             { return yylval.num = KANDOR; }
break;
case 35:

# line 121 "exptocas.l"
             { return yylval.num = K1OF; }
break;
case 36:

# line 122 "exptocas.l"
               { return yylval.num = KAND; }
break;
case 37:

# line 124 "exptocas.l"
          { yylval.str = strdup ( yytext ); return NAME; }
break;
case 38:

# line 126 "exptocas.l"
    { yylval.str = strdup ( yytext ); return NAME; }
break;
case 39:

# line 128 "exptocas.l"
              { yylval.num = atoi ( yytext ); return NUMBER; }
break;
case 40:

# line 129 "exptocas.l"
{ return yylval.num = yytext[0]; }
break;
case 41:

# line 131 "exptocas.l"
 { BEGIN(FUN); fun_level++; }
break;
case 42:

# line 132 "exptocas.l"
           { ec_state = YYSTATE; BEGIN(COMM); /* eat comments in functions */ }
break;
case 43:

# line 133 "exptocas.l"
         { /* Eat line comments in functions */ }
break;
case 44:

# line 134 "exptocas.l"
  { /* eat FUNCTIONs - skip IDs explicitly */ }
break;
case 45:

# line 135 "exptocas.l"
     { /* eat FUNCTIONs - skip strings explicitly */ }
break;
case 46:

# line 136 "exptocas.l"
              { /* eat FUNCTIONs - skip all other symbols in functions */ }
break;
case 47:

# line 137 "exptocas.l"
{ fun_level--; if ( ! fun_level ) BEGIN(0); }
break;
case 48:

# line 139 "exptocas.l"
              { BEGIN(RULE); /* eat RULEs */ }
break;
case 49:

# line 140 "exptocas.l"
             { /* eat RULEs */ }
break;
case 50:

# line 141 "exptocas.l"
   { BEGIN(0); }
break;
case 51:

# line 143 "exptocas.l"
{ /* eat CONSTANTs */
                       char *s = yytext; /* but don't forget to count lines.. */
                       while ( *s ) if ( *(s++) == '\n' ) ec_linenum++;
                     }
break;
case 52:

# line 148 "exptocas.l"
              { /* eat spaces */ }
break;
case 53:

# line 149 "exptocas.l"
       { ec_error ( "unknown keyword ", yytext ); /* put unrecognized keywords to cerr */ }
break;
case 54:

# line 150 "exptocas.l"
                   { ec_error ( "unknown symbol ", yytext ); /* put unrecognized data to cerr */ }
break;
case 55:

# line 152 "exptocas.l"
 { ec_linenum++; /* count lines */ }
break;
case -1:
break;
default:
(void)fprintf(yyout,"bad switch yylook %d",nstr);
} return(0); }
/* end of yylex */

# line 155 "exptocas.l"

/************************************/
/* Section 3                        */
/* auxiliary procedures             */

/*
int main ( void )
{
  yylex();
}
*/
int yyvstop[] = {
0,

44,
0, 

44,
0, 

44,
0, 

44,
0, 

44,
0, 

44,
0, 

54,
0, 

52,
54,
0, 

55,
0, 

40,
54,
0, 

40,
54,
0, 

54,
0, 

39,
53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

38,
53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

53,
54,
0, 

3,
0, 

3,
0, 

14,
0, 

14,
0, 

49,
0, 

49,
0, 

46,
0, 

46,
0, 

46,
0, 

46,
0, 

44,
46,
0, 

44,
46,
0, 

44,
46,
0, 

52,
0, 

2,
0, 

1,
0, 

39,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

21,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

38,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

4,
0, 

45,
0, 

42,
0, 

43,
0, 

44,
0, 

44,
0, 

44,
0, 

53,
0, 

36,
53,
0, 

53,
0, 

20,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

19,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

37,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

44,
0, 

44,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

17,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

24,
53,
0, 

48,
53,
0, 

53,
0, 

53,
0, 

30,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

7,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

44,
0, 

44,
0, 

53,
0, 

34,
53,
0, 

18,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

35,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

13,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

44,
0, 

44,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

9,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

22,
53,
0, 

53,
0, 

5,
53,
0, 

15,
53,
0, 

25,
53,
0, 

53,
0, 

53,
0, 

29,
53,
0, 

53,
0, 

12,
53,
0, 

53,
0, 

53,
0, 

44,
0, 

44,
0, 

53,
0, 

27,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

23,
53,
0, 

26,
53,
0, 

53,
0, 

32,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

11,
53,
0, 

44,
0, 

44,
0, 

31,
53,
0, 

53,
0, 

53,
0, 

53,
0, 

41,
53,
0, 

28,
53,
0, 

53,
0, 

8,
53,
0, 

53,
0, 

8,
0, 

44,
0, 

41,
44,
0, 

53,
0, 

53,
0, 

53,
0, 

33,
53,
0, 

53,
0, 

50,
0, 

44,
0, 

53,
0, 

6,
53,
0, 

53,
0, 

10,
53,
0, 

10,
0, 

44,
0, 

53,
0, 

16,
53,
0, 

44,
0, 

53,
0, 

44,
0, 

53,
0, 

47,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

53,
0, 

51,
0, 
0};
# define YYTYPE int
struct yywork { YYTYPE verify, advance; } yycrank[] = {
0,0,	0,0,	1,15,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	1,16,	1,17,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
16,55,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
1,15,	1,18,	1,19,	0,0,	
0,0,	1,19,	1,20,	16,55,	
0,0,	1,21,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
43,90,	8,43,	18,56,	1,19,	
1,19,	20,57,	1,19,	50,95,	
51,96,	0,0,	1,22,	1,23,	
1,24,	1,25,	1,26,	1,27,	
1,25,	1,25,	1,28,	1,25,	
1,25,	1,29,	1,25,	1,30,	
1,31,	1,25,	1,25,	1,32,	
1,33,	1,34,	1,35,	1,25,	
1,25,	1,25,	1,25,	1,25,	
1,19,	10,45,	1,19,	45,91,	
1,36,	47,92,	53,98,	91,132,	
54,99,	2,19,	25,59,	25,59,	
25,59,	25,59,	25,59,	25,59,	
25,59,	25,59,	25,59,	25,59,	
92,133,	98,134,	99,135,	132,166,	
133,167,	134,168,	2,19,	2,19,	
135,169,	2,19,	167,197,	168,198,	
169,199,	1,15,	2,23,	2,24,	
2,25,	2,26,	2,27,	2,25,	
2,25,	2,28,	2,25,	2,25,	
2,29,	2,25,	2,30,	2,31,	
2,25,	2,25,	2,32,	2,33,	
2,34,	2,35,	2,25,	2,25,	
2,25,	2,25,	2,25,	2,19,	
195,221,	2,19,	196,222,	197,223,	
166,195,	198,224,	199,225,	221,240,	
3,19,	39,59,	39,59,	39,59,	
39,59,	39,59,	39,59,	39,59,	
39,59,	39,59,	39,59,	166,196,	
222,241,	223,242,	224,243,	225,244,	
240,254,	3,19,	3,19,	241,255,	
3,19,	242,256,	39,87,	243,257,	
2,15,	3,23,	3,24,	3,25,	
3,37,	3,25,	3,25,	3,25,	
3,28,	3,25,	3,25,	3,29,	
3,25,	3,30,	3,31,	3,25,	
3,25,	3,32,	3,33,	3,34,	
3,35,	3,25,	3,38,	3,25,	
3,25,	3,25,	3,19,	244,258,	
3,19,	254,265,	256,266,	257,267,	
265,273,	267,274,	268,275,	4,19,	
59,59,	59,59,	59,59,	59,59,	
59,59,	59,59,	59,59,	59,59,	
59,59,	59,59,	274,278,	275,279,	
278,281,	279,282,	281,284,	282,285,	
4,19,	4,19,	285,287,	4,19,	
287,289,	289,291,	291,293,	3,15,	
4,23,	4,24,	4,25,	4,37,	
4,25,	4,25,	4,25,	4,28,	
4,25,	4,25,	4,29,	4,25,	
4,30,	4,31,	4,25,	4,25,	
4,32,	4,33,	4,34,	4,35,	
4,25,	4,38,	4,25,	4,25,	
4,25,	4,19,	293,295,	4,19,	
295,297,	297,299,	299,301,	0,0,	
0,0,	0,0,	5,19,	61,59,	
61,59,	61,59,	61,59,	61,59,	
61,59,	61,59,	61,59,	61,59,	
61,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	5,19,	
5,19,	0,0,	5,19,	61,101,	
0,0,	0,0,	4,15,	5,23,	
5,24,	5,39,	5,40,	5,25,	
5,25,	5,25,	5,41,	5,25,	
5,25,	5,29,	5,25,	5,30,	
5,31,	5,25,	5,25,	5,32,	
5,33,	5,34,	5,35,	5,25,	
5,38,	5,25,	5,25,	5,25,	
5,19,	0,0,	5,19,	14,48,	
0,0,	0,0,	0,0,	0,0,	
0,0,	6,19,	72,59,	72,59,	
72,59,	72,59,	72,59,	72,59,	
72,59,	72,59,	72,59,	72,59,	
14,48,	14,48,	0,0,	14,48,	
0,0,	0,0,	6,19,	6,19,	
0,0,	6,19,	0,0,	14,53,	
14,54,	5,15,	6,23,	6,24,	
6,39,	6,40,	6,25,	6,25,	
6,25,	6,41,	6,25,	6,25,	
6,29,	6,25,	6,30,	6,31,	
6,25,	6,25,	6,32,	6,33,	
6,34,	6,35,	6,25,	6,38,	
6,25,	6,25,	6,25,	6,19,	
7,42,	6,19,	0,0,	0,0,	
0,0,	0,0,	0,0,	9,44,	
7,42,	7,17,	0,0,	0,0,	
0,0,	0,0,	11,46,	9,44,	
9,17,	0,0,	0,0,	0,0,	
0,0,	0,0,	11,46,	0,0,	
0,0,	0,0,	14,48,	0,0,	
0,0,	12,46,	0,0,	0,0,	
6,15,	0,0,	0,0,	0,0,	
0,0,	12,46,	7,42,	7,42,	
0,0,	7,43,	0,0,	7,42,	
7,42,	9,44,	9,44,	7,42,	
0,0,	0,0,	9,44,	9,44,	
11,46,	11,46,	9,44,	0,0,	
0,0,	11,46,	11,46,	0,0,	
0,0,	11,46,	0,0,	0,0,	
7,42,	0,0,	0,0,	12,46,	
12,46,	0,0,	0,0,	9,44,	
12,46,	12,46,	0,0,	9,45,	
12,46,	13,48,	11,46,	0,0,	
0,0,	0,0,	11,47,	0,0,	
0,0,	13,48,	13,17,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	12,46,	7,42,	0,0,	
0,0,	12,47,	0,0,	0,0,	
0,0,	9,44,	0,0,	0,0,	
49,93,	0,0,	0,0,	0,0,	
11,46,	0,0,	0,0,	0,0,	
49,93,	49,93,	0,0,	13,49,	
13,50,	13,48,	0,0,	0,0,	
13,48,	13,51,	0,0,	12,46,	
13,52,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	13,48,	13,48,	
0,0,	13,48,	0,0,	0,0,	
0,0,	13,52,	49,94,	49,93,	
0,0,	13,53,	13,54,	49,93,	
49,93,	0,0,	0,0,	49,93,	
0,0,	0,0,	0,0,	21,58,	
21,58,	21,58,	21,58,	21,58,	
21,58,	21,58,	21,58,	21,58,	
21,58,	0,0,	0,0,	0,0,	
49,93,	0,0,	0,0,	13,52,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	49,93,	0,0,	
13,48,	0,0,	21,59,	0,0,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	21,59,	21,59,	
21,59,	21,59,	22,59,	22,59,	
22,59,	22,59,	22,59,	22,59,	
22,59,	22,59,	22,59,	22,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
22,60,	23,59,	23,59,	23,59,	
23,59,	23,59,	23,59,	23,59,	
23,59,	23,59,	23,59,	0,0,	
22,61,	0,0,	0,0,	0,0,	
22,62,	0,0,	23,63,	24,59,	
24,59,	24,59,	24,59,	24,59,	
24,59,	24,59,	24,59,	24,59,	
24,59,	0,0,	0,0,	0,0,	
23,64,	26,59,	26,59,	26,59,	
26,59,	26,59,	26,59,	26,59,	
26,59,	26,59,	26,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	24,65,	27,59,	
27,59,	27,59,	27,59,	27,59,	
27,59,	27,59,	27,59,	27,59,	
27,59,	0,0,	0,0,	26,66,	
28,59,	28,59,	28,59,	28,59,	
28,59,	28,59,	28,59,	28,59,	
28,59,	28,59,	29,59,	29,59,	
29,59,	29,59,	29,59,	29,59,	
29,59,	29,59,	29,59,	29,59,	
0,0,	0,0,	0,0,	0,0,	
27,67,	0,0,	0,0,	0,0,	
0,0,	0,0,	28,68,	0,0,	
0,0,	0,0,	0,0,	29,69,	
0,0,	0,0,	0,0,	0,0,	
0,0,	29,70,	30,59,	30,59,	
30,59,	30,59,	30,59,	30,59,	
30,59,	30,59,	30,59,	30,59,	
31,59,	31,59,	31,59,	31,59,	
31,59,	31,59,	31,59,	31,59,	
31,59,	31,59,	32,59,	32,59,	
32,59,	32,59,	32,59,	32,59,	
32,59,	32,59,	32,59,	32,59,	
0,0,	0,0,	31,72,	0,0,	
0,0,	0,0,	0,0,	30,71,	
0,0,	0,0,	31,73,	32,75,	
31,74,	33,59,	33,59,	33,59,	
33,59,	33,59,	33,59,	33,59,	
33,59,	33,59,	33,59,	0,0,	
0,0,	0,0,	0,0,	32,76,	
0,0,	0,0,	0,0,	0,0,	
33,77,	0,0,	33,78,	34,59,	
34,59,	34,59,	34,59,	34,59,	
34,59,	34,59,	34,59,	34,59,	
34,59,	0,0,	0,0,	0,0,	
0,0,	33,79,	33,80,	35,59,	
35,59,	35,59,	35,59,	35,59,	
35,59,	35,59,	35,59,	35,59,	
35,59,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	0,0,	
0,0,	0,0,	0,0,	0,0,	
34,81,	0,0,	0,0,	0,0,	
0,0,	35,82,	0,0,	0,0,	
0,0,	35,83,	63,59,	63,59,	
63,59,	63,59,	63,59,	63,59,	
63,59,	63,59,	63,59,	63,59,	
83,126,	83,126,	83,126,	83,126,	
83,126,	83,126,	83,126,	83,126,	
83,126,	83,126,	0,0,	0,0,	
36,84,	63,103,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
36,84,	36,84,	36,84,	36,84,	
37,59,	37,59,	37,59,	37,59,	
37,59,	37,59,	37,59,	37,59,	
37,59,	37,59,	38,59,	38,59,	
38,59,	38,59,	38,59,	38,59,	
38,59,	38,59,	38,59,	38,59,	
40,59,	40,59,	40,59,	40,59,	
40,59,	40,59,	40,59,	40,59,	
40,59,	40,59,	37,85,	0,0,	
0,0,	0,0,	38,86,	41,59,	
41,59,	41,59,	41,59,	41,59,	
41,59,	41,59,	41,59,	41,59,	
41,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	40,88,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	0,0,	0,0,	0,0,	
0,0,	41,89,	0,0,	0,0,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	0,0,	0,0,	
0,0,	0,0,	52,97,	0,0,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	52,97,	52,97,	
52,97,	52,97,	57,57,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	57,57,	57,0,	
60,59,	60,59,	60,59,	60,59,	
60,59,	60,59,	60,59,	60,59,	
60,59,	60,59,	62,59,	62,59,	
62,59,	62,59,	62,59,	62,59,	
62,59,	62,59,	62,59,	62,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
57,57,	57,57,	0,0,	0,0,	
0,0,	57,57,	57,57,	60,100,	
0,0,	57,57,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
62,102,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	57,57,	64,59,	
64,59,	64,59,	64,59,	64,59,	
64,59,	64,59,	64,59,	64,59,	
64,59,	65,59,	65,59,	65,59,	
65,59,	65,59,	65,59,	65,59,	
65,59,	65,59,	65,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
57,57,	0,0,	64,104,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	65,105,	
66,59,	66,59,	66,59,	66,59,	
66,59,	66,59,	66,59,	66,59,	
66,59,	66,59,	67,59,	67,59,	
67,59,	67,59,	67,59,	67,59,	
67,59,	67,59,	67,59,	67,59,	
66,106,	68,59,	68,59,	68,59,	
68,59,	68,59,	68,59,	68,59,	
68,59,	68,59,	68,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
66,107,	66,108,	0,0,	0,0,	
67,109,	69,59,	69,59,	69,59,	
69,59,	69,59,	69,59,	69,59,	
69,59,	69,59,	69,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	68,110,	70,59,	70,59,	
70,59,	70,59,	70,59,	70,59,	
70,59,	70,59,	70,59,	70,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
69,111,	0,0,	0,0,	0,0,	
0,0,	70,112,	71,59,	71,59,	
71,59,	71,59,	71,59,	71,59,	
71,59,	71,59,	71,59,	71,59,	
73,59,	73,59,	73,59,	73,59,	
73,59,	73,59,	73,59,	73,59,	
73,59,	73,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	71,113,	
0,0,	73,114,	74,59,	74,59,	
74,59,	74,59,	74,59,	74,59,	
74,59,	74,59,	74,59,	74,59,	
75,59,	75,59,	75,59,	75,59,	
75,59,	75,59,	75,59,	75,59,	
75,59,	75,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	75,116,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	74,115,	76,59,	
76,59,	76,59,	76,59,	76,59,	
76,59,	76,59,	76,59,	76,59,	
76,59,	77,59,	77,59,	77,59,	
77,59,	77,59,	77,59,	77,59,	
77,59,	77,59,	77,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	76,117,	
0,0,	0,0,	0,0,	0,0,	
0,0,	77,118,	78,59,	78,59,	
78,59,	78,59,	78,59,	78,59,	
78,59,	78,59,	78,59,	78,59,	
79,59,	79,59,	79,59,	79,59,	
79,59,	79,59,	79,59,	79,59,	
79,59,	79,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	78,119,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	78,120,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	79,121,	80,59,	
80,59,	80,59,	80,59,	80,59,	
80,59,	80,59,	80,59,	80,59,	
80,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	80,122,	81,59,	81,59,	
81,59,	81,59,	81,59,	81,59,	
81,59,	81,59,	81,59,	81,59,	
0,0,	0,0,	0,0,	80,123,	
82,59,	82,59,	82,59,	82,59,	
82,59,	82,59,	82,59,	82,59,	
82,59,	82,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	81,124,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	82,125,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
86,59,	86,59,	86,59,	86,59,	
86,59,	86,59,	86,59,	86,59,	
86,59,	86,59,	102,59,	102,59,	
102,59,	102,59,	102,59,	102,59,	
102,59,	102,59,	102,59,	102,59,	
0,0,	86,128,	0,0,	0,0,	
0,0,	0,0,	0,0,	102,138,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	84,84,	0,0,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	84,84,	84,84,	84,84,	
84,84,	85,59,	85,59,	85,59,	
85,59,	85,59,	85,59,	85,59,	
85,59,	85,59,	85,59,	87,59,	
87,59,	87,59,	87,59,	87,59,	
87,59,	87,59,	87,59,	87,59,	
87,59,	85,127,	88,59,	88,59,	
88,59,	88,59,	88,59,	88,59,	
88,59,	88,59,	88,59,	88,59,	
96,96,	0,0,	0,0,	0,0,	
0,0,	85,107,	85,108,	0,0,	
96,96,	96,0,	88,130,	0,0,	
0,0,	87,129,	89,59,	89,59,	
89,59,	89,59,	89,59,	89,59,	
89,59,	89,59,	89,59,	89,59,	
0,0,	0,0,	88,107,	88,108,	
103,59,	103,59,	103,59,	103,59,	
103,59,	103,59,	103,59,	103,59,	
103,59,	103,59,	96,96,	96,96,	
0,0,	0,0,	0,0,	96,96,	
96,96,	0,0,	0,0,	96,96,	
0,0,	0,0,	89,110,	0,0,	
89,131,	100,59,	100,59,	100,59,	
100,59,	100,59,	100,59,	100,59,	
100,59,	100,59,	100,59,	0,0,	
96,96,	101,59,	101,59,	101,59,	
101,59,	101,59,	101,59,	101,59,	
101,59,	101,59,	101,59,	104,59,	
104,59,	104,59,	104,59,	104,59,	
104,59,	104,59,	104,59,	104,59,	
104,59,	0,0,	0,0,	0,0,	
0,0,	100,136,	0,0,	0,0,	
0,0,	0,0,	96,96,	0,0,	
101,137,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	104,139,	
105,59,	105,59,	105,59,	105,59,	
105,59,	105,59,	105,59,	105,59,	
105,59,	105,59,	106,59,	106,59,	
106,59,	106,59,	106,59,	106,59,	
106,59,	106,59,	106,59,	106,59,	
107,59,	107,59,	107,59,	107,59,	
107,59,	107,59,	107,59,	107,59,	
107,59,	107,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	105,140,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	107,142,	108,59,	108,59,	
108,59,	108,59,	108,59,	108,59,	
108,59,	108,59,	108,59,	108,59,	
0,0,	106,141,	109,59,	109,59,	
109,59,	109,59,	109,59,	109,59,	
109,59,	109,59,	109,59,	109,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	108,143,	
0,0,	109,144,	110,59,	110,59,	
110,59,	110,59,	110,59,	110,59,	
110,59,	110,59,	110,59,	110,59,	
111,59,	111,59,	111,59,	111,59,	
111,59,	111,59,	111,59,	111,59,	
111,59,	111,59,	0,0,	110,145,	
112,59,	112,59,	112,59,	112,59,	
112,59,	112,59,	112,59,	112,59,	
112,59,	112,59,	113,59,	113,59,	
113,59,	113,59,	113,59,	113,59,	
113,59,	113,59,	113,59,	113,59,	
0,0,	0,0,	0,0,	0,0,	
111,146,	112,147,	0,0,	0,0,	
113,148,	114,59,	114,59,	114,59,	
114,59,	114,59,	114,59,	114,59,	
114,59,	114,59,	114,59,	115,59,	
115,59,	115,59,	115,59,	115,59,	
115,59,	115,59,	115,59,	115,59,	
115,59,	116,59,	116,59,	116,59,	
116,59,	116,59,	116,59,	116,59,	
116,59,	116,59,	116,59,	0,0,	
114,149,	0,0,	0,0,	0,0,	
115,150,	117,59,	117,59,	117,59,	
117,59,	117,59,	117,59,	117,59,	
117,59,	117,59,	117,59,	0,0,	
0,0,	116,151,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	117,152,	118,59,	
118,59,	118,59,	118,59,	118,59,	
118,59,	118,59,	118,59,	118,59,	
118,59,	119,59,	119,59,	119,59,	
119,59,	119,59,	119,59,	119,59,	
119,59,	119,59,	119,59,	0,0,	
118,153,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	119,154,	119,155,	
120,59,	120,59,	120,59,	120,59,	
120,59,	120,59,	120,59,	120,59,	
120,59,	120,59,	121,59,	121,59,	
121,59,	121,59,	121,59,	121,59,	
121,59,	121,59,	121,59,	121,59,	
122,59,	122,59,	122,59,	122,59,	
122,59,	122,59,	122,59,	122,59,	
122,59,	122,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	121,156,	
123,59,	123,59,	123,59,	123,59,	
123,59,	123,59,	123,59,	123,59,	
123,59,	123,59,	124,59,	124,59,	
124,59,	124,59,	124,59,	124,59,	
124,59,	124,59,	124,59,	124,59,	
122,157,	123,158,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	124,159,	
125,59,	125,59,	125,59,	125,59,	
125,59,	125,59,	125,59,	125,59,	
125,59,	125,59,	126,126,	126,126,	
126,126,	126,126,	126,126,	126,126,	
126,126,	126,126,	126,126,	126,126,	
127,59,	127,59,	127,59,	127,59,	
127,59,	127,59,	127,59,	127,59,	
127,59,	127,59,	0,0,	0,0,	
0,0,	125,160,	128,59,	128,59,	
128,59,	128,59,	128,59,	128,59,	
128,59,	128,59,	128,59,	128,59,	
129,59,	129,59,	129,59,	129,59,	
129,59,	129,59,	129,59,	129,59,	
129,59,	129,59,	130,59,	130,59,	
130,59,	130,59,	130,59,	130,59,	
130,59,	130,59,	130,59,	130,59,	
0,0,	0,0,	0,0,	127,161,	
128,162,	129,163,	131,59,	131,59,	
131,59,	131,59,	131,59,	131,59,	
131,59,	131,59,	131,59,	131,59,	
136,59,	136,59,	136,59,	136,59,	
136,59,	136,59,	136,59,	136,59,	
136,59,	136,59,	0,0,	131,165,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	130,164,	137,59,	137,59,	
137,59,	137,59,	137,59,	137,59,	
137,59,	137,59,	137,59,	137,59,	
0,0,	0,0,	136,170,	138,59,	
138,59,	138,59,	138,59,	138,59,	
138,59,	138,59,	138,59,	138,59,	
138,59,	139,59,	139,59,	139,59,	
139,59,	139,59,	139,59,	139,59,	
139,59,	139,59,	139,59,	0,0,	
137,171,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	139,173,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
138,172,	140,59,	140,59,	140,59,	
140,59,	140,59,	140,59,	140,59,	
140,59,	140,59,	140,59,	141,59,	
141,59,	141,59,	141,59,	141,59,	
141,59,	141,59,	141,59,	141,59,	
141,59,	142,59,	142,59,	142,59,	
142,59,	142,59,	142,59,	142,59,	
142,59,	142,59,	142,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	140,174,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	141,175,	143,59,	
143,59,	143,59,	143,59,	143,59,	
143,59,	143,59,	143,59,	143,59,	
143,59,	142,176,	144,59,	144,59,	
144,59,	144,59,	144,59,	144,59,	
144,59,	144,59,	144,59,	144,59,	
143,177,	145,59,	145,59,	145,59,	
145,59,	145,59,	145,59,	145,59,	
145,59,	145,59,	145,59,	146,59,	
146,59,	146,59,	146,59,	146,59,	
146,59,	146,59,	146,59,	146,59,	
146,59,	0,0,	0,0,	0,0,	
145,179,	0,0,	144,178,	147,59,	
147,59,	147,59,	147,59,	147,59,	
147,59,	147,59,	147,59,	147,59,	
147,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	147,180,	148,59,	
148,59,	148,59,	148,59,	148,59,	
148,59,	148,59,	148,59,	148,59,	
148,59,	149,59,	149,59,	149,59,	
149,59,	149,59,	149,59,	149,59,	
149,59,	149,59,	149,59,	0,0,	
148,181,	150,59,	150,59,	150,59,	
150,59,	150,59,	150,59,	150,59,	
150,59,	150,59,	150,59,	149,182,	
151,59,	151,59,	151,59,	151,59,	
151,59,	151,59,	151,59,	151,59,	
151,59,	151,59,	152,59,	152,59,	
152,59,	152,59,	152,59,	152,59,	
152,59,	152,59,	152,59,	152,59,	
150,183,	153,59,	153,59,	153,59,	
153,59,	153,59,	153,59,	153,59,	
153,59,	153,59,	153,59,	0,0,	
154,59,	154,59,	154,59,	154,59,	
154,59,	154,59,	154,59,	154,59,	
154,59,	154,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	153,184,	154,185,	
155,59,	155,59,	155,59,	155,59,	
155,59,	155,59,	155,59,	155,59,	
155,59,	155,59,	156,59,	156,59,	
156,59,	156,59,	156,59,	156,59,	
156,59,	156,59,	156,59,	156,59,	
157,59,	157,59,	157,59,	157,59,	
157,59,	157,59,	157,59,	157,59,	
157,59,	157,59,	158,59,	158,59,	
158,59,	158,59,	158,59,	158,59,	
158,59,	158,59,	158,59,	158,59,	
156,186,	159,59,	159,59,	159,59,	
159,59,	159,59,	159,59,	159,59,	
159,59,	159,59,	159,59,	160,59,	
160,59,	160,59,	160,59,	160,59,	
160,59,	160,59,	160,59,	160,59,	
160,59,	157,187,	0,0,	0,0,	
158,188,	161,59,	161,59,	161,59,	
161,59,	161,59,	161,59,	161,59,	
161,59,	161,59,	161,59,	162,59,	
162,59,	162,59,	162,59,	162,59,	
162,59,	162,59,	162,59,	162,59,	
162,59,	0,0,	0,0,	0,0,	
160,189,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
162,191,	0,0,	0,0,	0,0,	
161,175,	161,190,	163,59,	163,59,	
163,59,	163,59,	163,59,	163,59,	
163,59,	163,59,	163,59,	163,59,	
164,59,	164,59,	164,59,	164,59,	
164,59,	164,59,	164,59,	164,59,	
164,59,	164,59,	165,59,	165,59,	
165,59,	165,59,	165,59,	165,59,	
165,59,	165,59,	165,59,	165,59,	
0,0,	164,193,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
163,192,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	164,175,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
165,194,	170,59,	170,59,	170,59,	
170,59,	170,59,	170,59,	170,59,	
170,59,	170,59,	170,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	170,200,	171,59,	
171,59,	171,59,	171,59,	171,59,	
171,59,	171,59,	171,59,	171,59,	
171,59,	172,59,	172,59,	172,59,	
172,59,	172,59,	172,59,	172,59,	
172,59,	172,59,	172,59,	173,59,	
173,59,	173,59,	173,59,	173,59,	
173,59,	173,59,	173,59,	173,59,	
173,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
173,201,	174,59,	174,59,	174,59,	
174,59,	174,59,	174,59,	174,59,	
174,59,	174,59,	174,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	174,202,	175,59,	
175,59,	175,59,	175,59,	175,59,	
175,59,	175,59,	175,59,	175,59,	
175,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	175,203,	176,59,	
176,59,	176,59,	176,59,	176,59,	
176,59,	176,59,	176,59,	176,59,	
176,59,	177,59,	177,59,	177,59,	
177,59,	177,59,	177,59,	177,59,	
177,59,	177,59,	177,59,	178,59,	
178,59,	178,59,	178,59,	178,59,	
178,59,	178,59,	178,59,	178,59,	
178,59,	179,59,	179,59,	179,59,	
179,59,	179,59,	179,59,	179,59,	
179,59,	179,59,	179,59,	0,0,	
176,204,	0,0,	0,0,	177,205,	
178,206,	0,0,	0,0,	0,0,	
0,0,	0,0,	179,207,	180,59,	
180,59,	180,59,	180,59,	180,59,	
180,59,	180,59,	180,59,	180,59,	
180,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
180,208,	181,59,	181,59,	181,59,	
181,59,	181,59,	181,59,	181,59,	
181,59,	181,59,	181,59,	182,59,	
182,59,	182,59,	182,59,	182,59,	
182,59,	182,59,	182,59,	182,59,	
182,59,	183,59,	183,59,	183,59,	
183,59,	183,59,	183,59,	183,59,	
183,59,	183,59,	183,59,	0,0,	
0,0,	0,0,	0,0,	181,209,	
184,59,	184,59,	184,59,	184,59,	
184,59,	184,59,	184,59,	184,59,	
184,59,	184,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	183,210,	
0,0,	184,211,	185,59,	185,59,	
185,59,	185,59,	185,59,	185,59,	
185,59,	185,59,	185,59,	185,59,	
186,59,	186,59,	186,59,	186,59,	
186,59,	186,59,	186,59,	186,59,	
186,59,	186,59,	187,59,	187,59,	
187,59,	187,59,	187,59,	187,59,	
187,59,	187,59,	187,59,	187,59,	
0,0,	0,0,	0,0,	186,213,	
0,0,	0,0,	185,212,	188,59,	
188,59,	188,59,	188,59,	188,59,	
188,59,	188,59,	188,59,	188,59,	
188,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	187,214,	189,59,	
189,59,	189,59,	189,59,	189,59,	
189,59,	189,59,	189,59,	189,59,	
189,59,	190,59,	190,59,	190,59,	
190,59,	190,59,	190,59,	190,59,	
190,59,	190,59,	190,59,	188,215,	
189,216,	191,59,	191,59,	191,59,	
191,59,	191,59,	191,59,	191,59,	
191,59,	191,59,	191,59,	192,59,	
192,59,	192,59,	192,59,	192,59,	
192,59,	192,59,	192,59,	192,59,	
192,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	190,217,	0,0,	
192,218,	193,59,	193,59,	193,59,	
193,59,	193,59,	193,59,	193,59,	
193,59,	193,59,	193,59,	194,59,	
194,59,	194,59,	194,59,	194,59,	
194,59,	194,59,	194,59,	194,59,	
194,59,	200,59,	200,59,	200,59,	
200,59,	200,59,	200,59,	200,59,	
200,59,	200,59,	200,59,	193,219,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
200,226,	0,0,	0,0,	0,0,	
0,0,	0,0,	194,220,	201,59,	
201,59,	201,59,	201,59,	201,59,	
201,59,	201,59,	201,59,	201,59,	
201,59,	202,59,	202,59,	202,59,	
202,59,	202,59,	202,59,	202,59,	
202,59,	202,59,	202,59,	203,59,	
203,59,	203,59,	203,59,	203,59,	
203,59,	203,59,	203,59,	203,59,	
203,59,	201,227,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	202,228,	
0,0,	0,0,	0,0,	203,229,	
204,59,	204,59,	204,59,	204,59,	
204,59,	204,59,	204,59,	204,59,	
204,59,	204,59,	205,59,	205,59,	
205,59,	205,59,	205,59,	205,59,	
205,59,	205,59,	205,59,	205,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	205,230,	
206,59,	206,59,	206,59,	206,59,	
206,59,	206,59,	206,59,	206,59,	
206,59,	206,59,	207,59,	207,59,	
207,59,	207,59,	207,59,	207,59,	
207,59,	207,59,	207,59,	207,59,	
208,59,	208,59,	208,59,	208,59,	
208,59,	208,59,	208,59,	208,59,	
208,59,	208,59,	0,0,	206,231,	
209,59,	209,59,	209,59,	209,59,	
209,59,	209,59,	209,59,	209,59,	
209,59,	209,59,	0,0,	0,0,	
207,232,	0,0,	0,0,	0,0,	
208,233,	210,59,	210,59,	210,59,	
210,59,	210,59,	210,59,	210,59,	
210,59,	210,59,	210,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	210,234,	211,59,	
211,59,	211,59,	211,59,	211,59,	
211,59,	211,59,	211,59,	211,59,	
211,59,	212,59,	212,59,	212,59,	
212,59,	212,59,	212,59,	212,59,	
212,59,	212,59,	212,59,	213,59,	
213,59,	213,59,	213,59,	213,59,	
213,59,	213,59,	213,59,	213,59,	
213,59,	214,59,	214,59,	214,59,	
214,59,	214,59,	214,59,	214,59,	
214,59,	214,59,	214,59,	215,59,	
215,59,	215,59,	215,59,	215,59,	
215,59,	215,59,	215,59,	215,59,	
215,59,	0,0,	214,235,	216,59,	
216,59,	216,59,	216,59,	216,59,	
216,59,	216,59,	216,59,	216,59,	
216,59,	217,59,	217,59,	217,59,	
217,59,	217,59,	217,59,	217,59,	
217,59,	217,59,	217,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
215,236,	218,59,	218,59,	218,59,	
218,59,	218,59,	218,59,	218,59,	
218,59,	218,59,	218,59,	0,0,	
0,0,	217,237,	219,59,	219,59,	
219,59,	219,59,	219,59,	219,59,	
219,59,	219,59,	219,59,	219,59,	
220,59,	220,59,	220,59,	220,59,	
220,59,	220,59,	220,59,	220,59,	
220,59,	220,59,	226,59,	226,59,	
226,59,	226,59,	226,59,	226,59,	
226,59,	226,59,	226,59,	226,59,	
0,0,	220,239,	0,0,	0,0,	
0,0,	0,0,	219,238,	227,59,	
227,59,	227,59,	227,59,	227,59,	
227,59,	227,59,	227,59,	227,59,	
227,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	226,245,	228,59,	
228,59,	228,59,	228,59,	228,59,	
228,59,	228,59,	228,59,	228,59,	
228,59,	229,59,	229,59,	229,59,	
229,59,	229,59,	229,59,	229,59,	
229,59,	229,59,	229,59,	230,59,	
230,59,	230,59,	230,59,	230,59,	
230,59,	230,59,	230,59,	230,59,	
230,59,	0,0,	229,247,	0,0,	
0,0,	0,0,	0,0,	228,246,	
231,59,	231,59,	231,59,	231,59,	
231,59,	231,59,	231,59,	231,59,	
231,59,	231,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	230,248,	
232,59,	232,59,	232,59,	232,59,	
232,59,	232,59,	232,59,	232,59,	
232,59,	232,59,	231,249,	233,59,	
233,59,	233,59,	233,59,	233,59,	
233,59,	233,59,	233,59,	233,59,	
233,59,	234,59,	234,59,	234,59,	
234,59,	234,59,	234,59,	234,59,	
234,59,	234,59,	234,59,	235,59,	
235,59,	235,59,	235,59,	235,59,	
235,59,	235,59,	235,59,	235,59,	
235,59,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	234,250,	236,59,	236,59,	
236,59,	236,59,	236,59,	236,59,	
236,59,	236,59,	236,59,	236,59,	
237,59,	237,59,	237,59,	237,59,	
237,59,	237,59,	237,59,	237,59,	
237,59,	237,59,	238,59,	238,59,	
238,59,	238,59,	238,59,	238,59,	
238,59,	238,59,	238,59,	238,59,	
0,0,	237,252,	236,251,	239,59,	
239,59,	239,59,	239,59,	239,59,	
239,59,	239,59,	239,59,	239,59,	
239,59,	246,259,	246,259,	238,253,	
245,59,	245,59,	245,59,	245,59,	
245,59,	245,59,	245,59,	245,59,	
245,59,	245,59,	248,59,	248,59,	
248,59,	248,59,	248,59,	248,59,	
248,59,	248,59,	248,59,	248,59,	
246,259,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	246,259,	
246,259,	246,259,	0,0,	0,0,	
0,0,	246,259,	0,0,	248,262,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,259,	246,259,	
0,0,	246,259,	247,59,	247,59,	
247,59,	247,59,	247,59,	247,59,	
247,59,	247,59,	247,59,	247,59,	
249,59,	249,59,	249,59,	249,59,	
249,59,	249,59,	249,59,	249,59,	
249,59,	249,59,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	247,261,	
0,0,	0,0,	0,0,	246,260,	
0,0,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	246,260,	
246,260,	246,260,	246,260,	0,0,	
246,259,	250,59,	250,59,	250,59,	
250,59,	250,59,	250,59,	250,59,	
250,59,	250,59,	250,59,	251,59,	
251,59,	251,59,	251,59,	251,59,	
251,59,	251,59,	251,59,	251,59,	
251,59,	252,59,	252,59,	252,59,	
252,59,	252,59,	252,59,	252,59,	
252,59,	252,59,	252,59,	0,0,	
251,263,	253,59,	253,59,	253,59,	
253,59,	253,59,	253,59,	253,59,	
253,59,	253,59,	253,59,	259,259,	
259,259,	261,59,	261,59,	261,59,	
261,59,	261,59,	261,59,	261,59,	
261,59,	261,59,	261,59,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	261,270,	0,0,	
0,0,	0,0,	259,259,	0,0,	
0,0,	253,264,	0,0,	0,0,	
0,0,	259,259,	259,259,	259,259,	
0,0,	0,0,	0,0,	259,259,	
0,0,	0,0,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	0,0,	259,259,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	259,268,	
263,59,	263,59,	263,59,	263,59,	
263,59,	263,59,	263,59,	263,59,	
263,59,	263,59,	0,0,	0,0,	
264,59,	264,59,	264,59,	264,59,	
264,59,	264,59,	264,59,	264,59,	
264,59,	264,59,	0,0,	0,0,	
0,0,	259,259,	0,0,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	259,259,	259,259,	259,259,	
259,259,	264,272,	259,259,	260,259,	
260,259,	262,59,	262,59,	262,59,	
262,59,	262,59,	262,59,	262,59,	
262,59,	262,59,	262,59,	270,59,	
270,59,	270,59,	270,59,	270,59,	
270,59,	270,59,	270,59,	270,59,	
270,59,	0,0,	260,259,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	260,259,	260,259,	260,259,	
262,271,	0,0,	0,0,	260,259,	
0,0,	0,0,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,259,	260,259,	0,0,	260,259,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	260,269,	
272,59,	272,59,	272,59,	272,59,	
272,59,	272,59,	272,59,	272,59,	
272,59,	272,59,	277,59,	277,59,	
277,59,	277,59,	277,59,	277,59,	
277,59,	277,59,	277,59,	277,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	260,260,	0,0,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	260,260,	260,260,	260,260,	
260,260,	0,0,	260,259,	269,59,	
269,59,	269,59,	269,59,	269,59,	
269,59,	269,59,	269,59,	269,59,	
269,59,	271,59,	271,59,	271,59,	
271,59,	271,59,	271,59,	271,59,	
271,59,	271,59,	271,59,	280,59,	
280,59,	280,59,	280,59,	280,59,	
280,59,	280,59,	280,59,	280,59,	
280,59,	269,276,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	271,277,	
276,59,	276,59,	276,59,	276,59,	
276,59,	276,59,	276,59,	276,59,	
276,59,	276,59,	283,59,	283,59,	
283,59,	283,59,	283,59,	283,59,	
283,59,	283,59,	283,59,	283,59,	
276,280,	0,0,	0,0,	0,0,	
0,0,	0,0,	280,283,	0,0,	
0,0,	283,286,	286,59,	286,59,	
286,59,	286,59,	286,59,	286,59,	
286,59,	286,59,	286,59,	286,59,	
288,59,	288,59,	288,59,	288,59,	
288,59,	288,59,	288,59,	288,59,	
288,59,	288,59,	290,59,	290,59,	
290,59,	290,59,	290,59,	290,59,	
290,59,	290,59,	290,59,	290,59,	
0,0,	286,288,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	288,290,	292,59,	
292,59,	292,59,	292,59,	292,59,	
292,59,	292,59,	292,59,	292,59,	
292,59,	0,0,	0,0,	0,0,	
0,0,	290,292,	294,59,	294,59,	
294,59,	294,59,	294,59,	294,59,	
294,59,	294,59,	294,59,	294,59,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	294,296,	
0,0,	0,0,	0,0,	292,294,	
296,59,	296,59,	296,59,	296,59,	
296,59,	296,59,	296,59,	296,59,	
296,59,	296,59,	298,59,	298,59,	
298,59,	298,59,	298,59,	298,59,	
298,59,	298,59,	298,59,	298,59,	
300,59,	300,59,	300,59,	300,59,	
300,59,	300,59,	300,59,	300,59,	
300,59,	300,59,	296,298,	300,301,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	0,0,	0,0,	
0,0,	0,0,	298,300,	0,0,	
0,0};
struct yysvf yysvec[] = {
0,	0,	0,
yycrank+-1,	0,		yyvstop+1,
yycrank+-60,	yysvec+1,	yyvstop+3,
yycrank+-119,	yysvec+1,	yyvstop+5,
yycrank+-178,	yysvec+1,	yyvstop+7,
yycrank+-237,	yysvec+1,	yyvstop+9,
yycrank+-296,	yysvec+1,	yyvstop+11,
yycrank+-387,	0,		0,	
yycrank+-15,	yysvec+7,	0,	
yycrank+-394,	0,		0,	
yycrank+-24,	yysvec+9,	0,	
yycrank+-401,	yysvec+9,	0,	
yycrank+-416,	yysvec+9,	0,	
yycrank+-464,	0,		0,	
yycrank+-290,	yysvec+13,	0,	
yycrank+0,	0,		yyvstop+13,
yycrank+15,	0,		yyvstop+15,
yycrank+0,	0,		yyvstop+18,
yycrank+16,	0,		yyvstop+20,
yycrank+0,	0,		yyvstop+23,
yycrank+16,	0,		yyvstop+26,
yycrank+495,	0,		yyvstop+28,
yycrank+570,	yysvec+21,	yyvstop+32,
yycrank+589,	yysvec+21,	yyvstop+35,
yycrank+607,	yysvec+21,	yyvstop+38,
yycrank+54,	yysvec+21,	yyvstop+41,
yycrank+621,	yysvec+21,	yyvstop+44,
yycrank+639,	yysvec+21,	yyvstop+47,
yycrank+652,	yysvec+21,	yyvstop+50,
yycrank+662,	yysvec+21,	yyvstop+53,
yycrank+694,	yysvec+21,	yyvstop+56,
yycrank+704,	yysvec+21,	yyvstop+59,
yycrank+714,	yysvec+21,	yyvstop+62,
yycrank+737,	yysvec+21,	yyvstop+65,
yycrank+759,	yysvec+21,	yyvstop+68,
yycrank+775,	yysvec+21,	yyvstop+71,
yycrank+785,	yysvec+21,	yyvstop+74,
yycrank+860,	yysvec+21,	yyvstop+78,
yycrank+870,	yysvec+21,	yyvstop+81,
yycrank+113,	yysvec+21,	yyvstop+84,
yycrank+880,	yysvec+21,	yyvstop+87,
yycrank+895,	yysvec+21,	yyvstop+90,
yycrank+0,	0,		yyvstop+93,
yycrank+15,	0,		yyvstop+95,
yycrank+0,	0,		yyvstop+97,
yycrank+17,	0,		yyvstop+99,
yycrank+0,	0,		yyvstop+101,
yycrank+19,	0,		yyvstop+103,
yycrank+0,	0,		yyvstop+105,
yycrank+-491,	0,		yyvstop+107,
yycrank+21,	0,		yyvstop+109,
yycrank+19,	0,		yyvstop+111,
yycrank+911,	0,		yyvstop+113,
yycrank+20,	yysvec+52,	yyvstop+116,
yycrank+15,	yysvec+52,	yyvstop+119,
yycrank+0,	yysvec+16,	yyvstop+122,
yycrank+0,	0,		yyvstop+124,
yycrank+-1033,	0,		yyvstop+126,
yycrank+0,	yysvec+21,	yyvstop+128,
yycrank+172,	yysvec+21,	yyvstop+131,
yycrank+996,	yysvec+21,	yyvstop+133,
yycrank+231,	yysvec+21,	yyvstop+135,
yycrank+1006,	yysvec+21,	yyvstop+137,
yycrank+810,	yysvec+21,	yyvstop+139,
yycrank+1051,	yysvec+21,	yyvstop+141,
yycrank+1061,	yysvec+21,	yyvstop+143,
yycrank+1092,	yysvec+21,	yyvstop+145,
yycrank+1102,	yysvec+21,	yyvstop+147,
yycrank+1113,	yysvec+21,	yyvstop+149,
yycrank+1133,	yysvec+21,	yyvstop+151,
yycrank+1150,	yysvec+21,	yyvstop+153,
yycrank+1174,	yysvec+21,	yyvstop+155,
yycrank+290,	yysvec+21,	yyvstop+157,
yycrank+1184,	yysvec+21,	yyvstop+160,
yycrank+1206,	yysvec+21,	yyvstop+162,
yycrank+1216,	yysvec+21,	yyvstop+164,
yycrank+1243,	yysvec+21,	yyvstop+166,
yycrank+1253,	yysvec+21,	yyvstop+168,
yycrank+1278,	yysvec+21,	yyvstop+170,
yycrank+1288,	yysvec+21,	yyvstop+172,
yycrank+1323,	yysvec+21,	yyvstop+174,
yycrank+1342,	yysvec+21,	yyvstop+176,
yycrank+1356,	yysvec+21,	yyvstop+178,
yycrank+820,	yysvec+21,	yyvstop+180,
yycrank+1382,	yysvec+21,	yyvstop+182,
yycrank+1457,	yysvec+21,	yyvstop+185,
yycrank+1392,	yysvec+21,	yyvstop+187,
yycrank+1467,	yysvec+21,	yyvstop+189,
yycrank+1478,	yysvec+21,	yyvstop+191,
yycrank+1502,	yysvec+21,	yyvstop+193,
yycrank+0,	0,		yyvstop+195,
yycrank+31,	0,		0,	
yycrank+44,	0,		0,	
yycrank+0,	yysvec+49,	0,	
yycrank+0,	0,		yyvstop+197,
yycrank+0,	0,		yyvstop+199,
yycrank+-1535,	0,		yyvstop+201,
yycrank+0,	yysvec+52,	yyvstop+203,
yycrank+45,	yysvec+52,	yyvstop+205,
yycrank+36,	yysvec+52,	yyvstop+207,
yycrank+1541,	yysvec+21,	yyvstop+209,
yycrank+1553,	yysvec+21,	yyvstop+211,
yycrank+1402,	yysvec+21,	yyvstop+214,
yycrank+1516,	yysvec+21,	yyvstop+216,
yycrank+1563,	yysvec+21,	yyvstop+219,
yycrank+1592,	yysvec+21,	yyvstop+221,
yycrank+1602,	yysvec+21,	yyvstop+223,
yycrank+1612,	yysvec+21,	yyvstop+225,
yycrank+1638,	yysvec+21,	yyvstop+227,
yycrank+1650,	yysvec+21,	yyvstop+229,
yycrank+1670,	yysvec+21,	yyvstop+231,
yycrank+1680,	yysvec+21,	yyvstop+233,
yycrank+1692,	yysvec+21,	yyvstop+235,
yycrank+1702,	yysvec+21,	yyvstop+237,
yycrank+1721,	yysvec+21,	yyvstop+239,
yycrank+1731,	yysvec+21,	yyvstop+241,
yycrank+1741,	yysvec+21,	yyvstop+243,
yycrank+1757,	yysvec+21,	yyvstop+245,
yycrank+1779,	yysvec+21,	yyvstop+247,
yycrank+1789,	yysvec+21,	yyvstop+249,
yycrank+1812,	yysvec+21,	yyvstop+251,
yycrank+1822,	yysvec+21,	yyvstop+254,
yycrank+1832,	yysvec+21,	yyvstop+256,
yycrank+1848,	yysvec+21,	yyvstop+258,
yycrank+1858,	yysvec+21,	yyvstop+260,
yycrank+1880,	yysvec+21,	yyvstop+262,
yycrank+1890,	yysvec+21,	yyvstop+264,
yycrank+1900,	yysvec+21,	yyvstop+267,
yycrank+1914,	yysvec+21,	yyvstop+269,
yycrank+1924,	yysvec+21,	yyvstop+271,
yycrank+1934,	yysvec+21,	yyvstop+273,
yycrank+1950,	yysvec+21,	yyvstop+275,
yycrank+20,	0,		0,	
yycrank+21,	0,		0,	
yycrank+22,	yysvec+52,	yyvstop+277,
yycrank+53,	yysvec+52,	yyvstop+279,
yycrank+1960,	yysvec+21,	yyvstop+281,
yycrank+1982,	yysvec+21,	yyvstop+283,
yycrank+1995,	yysvec+21,	yyvstop+285,
yycrank+2005,	yysvec+21,	yyvstop+287,
yycrank+2037,	yysvec+21,	yyvstop+289,
yycrank+2047,	yysvec+21,	yyvstop+291,
yycrank+2057,	yysvec+21,	yyvstop+293,
yycrank+2083,	yysvec+21,	yyvstop+295,
yycrank+2094,	yysvec+21,	yyvstop+297,
yycrank+2105,	yysvec+21,	yyvstop+299,
yycrank+2115,	yysvec+21,	yyvstop+301,
yycrank+2131,	yysvec+21,	yyvstop+304,
yycrank+2151,	yysvec+21,	yyvstop+306,
yycrank+2161,	yysvec+21,	yyvstop+308,
yycrank+2173,	yysvec+21,	yyvstop+310,
yycrank+2184,	yysvec+21,	yyvstop+312,
yycrank+2194,	yysvec+21,	yyvstop+315,
yycrank+2205,	yysvec+21,	yyvstop+318,
yycrank+2216,	yysvec+21,	yyvstop+320,
yycrank+2236,	yysvec+21,	yyvstop+322,
yycrank+2246,	yysvec+21,	yyvstop+325,
yycrank+2256,	yysvec+21,	yyvstop+327,
yycrank+2266,	yysvec+21,	yyvstop+329,
yycrank+2277,	yysvec+21,	yyvstop+331,
yycrank+2287,	yysvec+21,	yyvstop+334,
yycrank+2301,	yysvec+21,	yyvstop+336,
yycrank+2311,	yysvec+21,	yyvstop+338,
yycrank+2338,	yysvec+21,	yyvstop+340,
yycrank+2348,	yysvec+21,	yyvstop+342,
yycrank+2358,	yysvec+21,	yyvstop+344,
yycrank+87,	0,		0,	
yycrank+40,	0,		0,	
yycrank+53,	yysvec+52,	yyvstop+346,
yycrank+40,	yysvec+52,	yyvstop+348,
yycrank+2393,	yysvec+21,	yyvstop+350,
yycrank+2411,	yysvec+21,	yyvstop+352,
yycrank+2421,	yysvec+21,	yyvstop+355,
yycrank+2431,	yysvec+21,	yyvstop+358,
yycrank+2449,	yysvec+21,	yyvstop+360,
yycrank+2467,	yysvec+21,	yyvstop+362,
yycrank+2487,	yysvec+21,	yyvstop+364,
yycrank+2497,	yysvec+21,	yyvstop+366,
yycrank+2507,	yysvec+21,	yyvstop+368,
yycrank+2517,	yysvec+21,	yyvstop+370,
yycrank+2539,	yysvec+21,	yyvstop+372,
yycrank+2557,	yysvec+21,	yyvstop+374,
yycrank+2567,	yysvec+21,	yyvstop+376,
yycrank+2577,	yysvec+21,	yyvstop+379,
yycrank+2592,	yysvec+21,	yyvstop+381,
yycrank+2610,	yysvec+21,	yyvstop+383,
yycrank+2620,	yysvec+21,	yyvstop+385,
yycrank+2630,	yysvec+21,	yyvstop+387,
yycrank+2647,	yysvec+21,	yyvstop+389,
yycrank+2663,	yysvec+21,	yyvstop+391,
yycrank+2673,	yysvec+21,	yyvstop+393,
yycrank+2685,	yysvec+21,	yyvstop+395,
yycrank+2695,	yysvec+21,	yyvstop+398,
yycrank+2717,	yysvec+21,	yyvstop+400,
yycrank+2727,	yysvec+21,	yyvstop+402,
yycrank+74,	0,		0,	
yycrank+65,	0,		0,	
yycrank+70,	0,		0,	
yycrank+72,	yysvec+52,	yyvstop+404,
yycrank+85,	yysvec+52,	yyvstop+406,
yycrank+2737,	yysvec+21,	yyvstop+408,
yycrank+2763,	yysvec+21,	yyvstop+410,
yycrank+2773,	yysvec+21,	yyvstop+412,
yycrank+2783,	yysvec+21,	yyvstop+414,
yycrank+2808,	yysvec+21,	yyvstop+416,
yycrank+2818,	yysvec+21,	yyvstop+419,
yycrank+2836,	yysvec+21,	yyvstop+421,
yycrank+2846,	yysvec+21,	yyvstop+423,
yycrank+2856,	yysvec+21,	yyvstop+425,
yycrank+2868,	yysvec+21,	yyvstop+427,
yycrank+2885,	yysvec+21,	yyvstop+430,
yycrank+2903,	yysvec+21,	yyvstop+432,
yycrank+2913,	yysvec+21,	yyvstop+435,
yycrank+2923,	yysvec+21,	yyvstop+438,
yycrank+2933,	yysvec+21,	yyvstop+441,
yycrank+2943,	yysvec+21,	yyvstop+443,
yycrank+2955,	yysvec+21,	yyvstop+445,
yycrank+2965,	yysvec+21,	yyvstop+448,
yycrank+2985,	yysvec+21,	yyvstop+450,
yycrank+2998,	yysvec+21,	yyvstop+453,
yycrank+3008,	yysvec+21,	yyvstop+455,
yycrank+75,	0,		0,	
yycrank+92,	0,		0,	
yycrank+97,	0,		0,	
yycrank+96,	yysvec+52,	yyvstop+457,
yycrank+96,	yysvec+52,	yyvstop+459,
yycrank+3018,	yysvec+21,	yyvstop+461,
yycrank+3035,	yysvec+21,	yyvstop+463,
yycrank+3055,	yysvec+21,	yyvstop+466,
yycrank+3065,	yysvec+21,	yyvstop+468,
yycrank+3075,	yysvec+21,	yyvstop+470,
yycrank+3092,	yysvec+21,	yyvstop+472,
yycrank+3112,	yysvec+21,	yyvstop+474,
yycrank+3123,	yysvec+21,	yyvstop+477,
yycrank+3133,	yysvec+21,	yyvstop+480,
yycrank+3143,	yysvec+21,	yyvstop+482,
yycrank+3162,	yysvec+21,	yyvstop+485,
yycrank+3172,	yysvec+21,	yyvstop+487,
yycrank+3182,	yysvec+21,	yyvstop+489,
yycrank+3195,	yysvec+21,	yyvstop+491,
yycrank+103,	0,		0,	
yycrank+110,	0,		0,	
yycrank+112,	0,		0,	
yycrank+116,	yysvec+52,	yyvstop+494,
yycrank+133,	yysvec+52,	yyvstop+496,
yycrank+3208,	yysvec+21,	yyvstop+498,
yycrank+3244,	yysvec+21,	yyvstop+501,
yycrank+3258,	yysvec+21,	yyvstop+503,
yycrank+3218,	yysvec+21,	yyvstop+505,
yycrank+3268,	yysvec+21,	yyvstop+507,
yycrank+3321,	yysvec+21,	yyvstop+510,
yycrank+3331,	yysvec+21,	yyvstop+513,
yycrank+3341,	yysvec+21,	yyvstop+515,
yycrank+3353,	yysvec+21,	yyvstop+518,
yycrank+129,	0,		0,	
yycrank+0,	0,		yyvstop+520,
yycrank+155,	0,		0,	
yycrank+131,	yysvec+52,	yyvstop+522,
yycrank+0,	yysvec+52,	yyvstop+524,
yycrank+3402,	0,		0,	
yycrank+3518,	yysvec+21,	yyvstop+527,
yycrank+3365,	yysvec+21,	yyvstop+529,
yycrank+3481,	yysvec+21,	yyvstop+531,
yycrank+3424,	yysvec+21,	yyvstop+533,
yycrank+3436,	yysvec+21,	yyvstop+536,
yycrank+127,	0,		0,	
yycrank+0,	0,		yyvstop+538,
yycrank+144,	yysvec+52,	yyvstop+540,
yycrank+140,	0,		0,	
yycrank+3595,	yysvec+21,	yyvstop+542,
yycrank+3491,	yysvec+21,	yyvstop+544,
yycrank+3605,	yysvec+21,	yyvstop+547,
yycrank+3540,	yysvec+21,	yyvstop+549,
yycrank+0,	0,		yyvstop+552,
yycrank+151,	yysvec+52,	yyvstop+554,
yycrank+163,	0,		0,	
yycrank+3636,	yysvec+21,	yyvstop+556,
yycrank+3550,	yysvec+21,	yyvstop+558,
yycrank+154,	yysvec+52,	yyvstop+561,
yycrank+138,	0,		0,	
yycrank+3615,	yysvec+21,	yyvstop+563,
yycrank+175,	yysvec+52,	yyvstop+565,
yycrank+168,	0,		0,	
yycrank+3646,	yysvec+21,	yyvstop+567,
yycrank+0,	0,		yyvstop+569,
yycrank+159,	0,		0,	
yycrank+3666,	yysvec+21,	yyvstop+571,
yycrank+162,	0,		0,	
yycrank+3676,	yysvec+21,	yyvstop+573,
yycrank+158,	0,		0,	
yycrank+3686,	yysvec+21,	yyvstop+575,
yycrank+158,	0,		0,	
yycrank+3707,	yysvec+21,	yyvstop+577,
yycrank+205,	0,		0,	
yycrank+3722,	yysvec+21,	yyvstop+579,
yycrank+194,	0,		0,	
yycrank+3744,	yysvec+21,	yyvstop+581,
yycrank+189,	0,		0,	
yycrank+3754,	yysvec+21,	yyvstop+583,
yycrank+215,	0,		0,	
yycrank+3764,	yysvec+21,	yyvstop+585,
yycrank+0,	0,		yyvstop+587,
0,	0,	0};
struct yywork *yytop = yycrank+3838;
struct yysvf *yybgin = yysvec+1;
char yymatch[] = {
  0,   1,   1,   1,   1,   1,   1,   1, 
  1,   9,  10,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  9,   1,   1,   1,   1,   1,   1,  39, 
 40,  40,   1,   1,  44,  45,  44,   1, 
 48,  48,  48,  48,  48,  48,  48,  48, 
 48,  48,  40,  40,   1,  40,   1,  44, 
  1,  65,  65,  65,  65,  65,  65,  65, 
 65,  65,  65,  65,  65,  65,  65,  65, 
 65,  65,  65,  65,  65,  65,  65,  65, 
 65,  65,  65,   1,  44,   1,   1,  95, 
  1,  95,  95,  95,  95,  95,  95,  95, 
 95,  95,  95,  95,  95,  95,  95,  95, 
 95,  95,  95,  95,  95,  95,  95,  95, 
 95,  95,  95,   1,  45,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
  1,   1,   1,   1,   1,   1,   1,   1, 
0};
char yyextra[] = {
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0,0,0,0,0,0,0,0,
0};
/*	Copyright (c) 1989 AT&T	*/
/*	  All Rights Reserved  	*/

/*	THIS IS UNPUBLISHED PROPRIETARY SOURCE CODE OF AT&T	*/
/*	The copyright notice above does not evidence any   	*/
/*	actual or intended publication of such source code.	*/

#pragma ident	"@(#)ncform	6.11	97/01/06 SMI"

int yylineno =1;
# define YYU(x) x
# define NLSTATE yyprevious=YYNEWLINE
struct yysvf *yylstate [YYLMAX], **yylsp, **yyolsp;
char yysbuf[YYLMAX];
char *yysptr = yysbuf;
int *yyfnd;
extern struct yysvf *yyestate;
int yyprevious = YYNEWLINE;
#if defined(__cplusplus) || defined(__STDC__)
int yylook(void)
#else
yylook()
#endif
{
	register struct yysvf *yystate, **lsp;
	register struct yywork *yyt;
	struct yysvf *yyz;
	int yych, yyfirst;
	struct yywork *yyr;
# ifdef LEXDEBUG
	int debug;
# endif
	char *yylastch;
	/* start off machines */
# ifdef LEXDEBUG
	debug = 0;
# endif
	yyfirst=1;
	if (!yymorfg)
		yylastch = yytext;
	else {
		yymorfg=0;
		yylastch = yytext+yyleng;
		}
	for(;;){
		lsp = yylstate;
		yyestate = yystate = yybgin;
		if (yyprevious==YYNEWLINE) yystate++;
		for (;;){
# ifdef LEXDEBUG
			if(debug)fprintf(yyout,"state %d\n",yystate-yysvec-1);
# endif
			yyt = yystate->yystoff;
			if(yyt == yycrank && !yyfirst){  /* may not be any transitions */
				yyz = yystate->yyother;
				if(yyz == 0)break;
				if(yyz->yystoff == yycrank)break;
				}
#ifndef __cplusplus
			*yylastch++ = yych = input();
#else
			*yylastch++ = yych = lex_input();
#endif
#ifdef YYISARRAY
			if(yylastch > &yytext[YYLMAX]) {
				fprintf(yyout,"Input string too long, limit %d\n",YYLMAX);
				exit(1);
			}
#else
			if (yylastch >= &yytext[ yytextsz ]) {
				int	x = yylastch - yytext;

				yytextsz += YYTEXTSZINC;
				if (yytext == yy_tbuf) {
				    yytext = (char *) malloc(yytextsz);
				    memcpy(yytext, yy_tbuf, sizeof (yy_tbuf));
				}
				else
				    yytext = (char *) realloc(yytext, yytextsz);
				if (!yytext) {
				    fprintf(yyout,
					"Cannot realloc yytext\n");
				    exit(1);
				}
				yylastch = yytext + x;
			}
#endif
			yyfirst=0;
		tryagain:
# ifdef LEXDEBUG
			if(debug){
				fprintf(yyout,"char ");
				allprint(yych);
				putchar('\n');
				}
# endif
			yyr = yyt;
			if ( (int)yyt > (int)yycrank){
				yyt = yyr + yych;
				if (yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = yyt->advance+yysvec;
					if(lsp > &yylstate[YYLMAX]) {
						fprintf(yyout,"Input string too long, limit %d\n",YYLMAX);
						exit(1);
					}
					goto contin;
					}
				}
# ifdef YYOPTIM
			else if((int)yyt < (int)yycrank) {		/* r < yycrank */
				yyt = yyr = yycrank+(yycrank-yyt);
# ifdef LEXDEBUG
				if(debug)fprintf(yyout,"compressed state\n");
# endif
				yyt = yyt + yych;
				if(yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transitions */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = yyt->advance+yysvec;
					if(lsp > &yylstate[YYLMAX]) {
						fprintf(yyout,"Input string too long, limit %d\n",YYLMAX);
						exit(1);
					}
					goto contin;
					}
				yyt = yyr + YYU(yymatch[yych]);
# ifdef LEXDEBUG
				if(debug){
					fprintf(yyout,"try fall back character ");
					allprint(YYU(yymatch[yych]));
					putchar('\n');
					}
# endif
				if(yyt <= yytop && yyt->verify+yysvec == yystate){
					if(yyt->advance+yysvec == YYLERR)	/* error transition */
						{unput(*--yylastch);break;}
					*lsp++ = yystate = yyt->advance+yysvec;
					if(lsp > &yylstate[YYLMAX]) {
						fprintf(yyout,"Input string too long, limit %d\n",YYLMAX);
						exit(1);
					}
					goto contin;
					}
				}
			if ((yystate = yystate->yyother) && (yyt= yystate->yystoff) != yycrank){
# ifdef LEXDEBUG
				if(debug)fprintf(yyout,"fall back to state %d\n",yystate-yysvec-1);
# endif
				goto tryagain;
				}
# endif
			else
				{unput(*--yylastch);break;}
		contin:
# ifdef LEXDEBUG
			if(debug){
				fprintf(yyout,"state %d char ",yystate-yysvec-1);
				allprint(yych);
				putchar('\n');
				}
# endif
			;
			}
# ifdef LEXDEBUG
		if(debug){
			fprintf(yyout,"stopped at %d with ",*(lsp-1)-yysvec-1);
			allprint(yych);
			putchar('\n');
			}
# endif
		while (lsp-- > yylstate){
			*yylastch-- = 0;
			if (*lsp != 0 && (yyfnd= (*lsp)->yystops) && *yyfnd > 0){
				yyolsp = lsp;
				if(yyextra[*yyfnd]){		/* must backup */
					while(yyback((*lsp)->yystops,-*yyfnd) != 1 && lsp > yylstate){
						lsp--;
						unput(*yylastch--);
						}
					}
				yyprevious = YYU(*yylastch);
				yylsp = lsp;
				yyleng = yylastch-yytext+1;
				yytext[yyleng] = 0;
# ifdef LEXDEBUG
				if(debug){
					fprintf(yyout,"\nmatch ");
					sprint(yytext);
					fprintf(yyout," action %d\n",*yyfnd);
					}
# endif
				return(*yyfnd++);
				}
			unput(*yylastch);
			}
		if (yytext[0] == 0  /* && feof(yyin) */)
			{
			yysptr=yysbuf;
			return(0);
			}
#ifndef __cplusplus
		yyprevious = yytext[0] = input();
		if (yyprevious>0)
			output(yyprevious);
#else
		yyprevious = yytext[0] = lex_input();
		if (yyprevious>0)
			lex_output(yyprevious);
#endif
		yylastch=yytext;
# ifdef LEXDEBUG
		if(debug)putchar('\n');
# endif
		}
	}
#if defined(__cplusplus) || defined(__STDC__)
int yyback(int *p, int m)
#else
yyback(p, m)
	int *p;
#endif
{
	if (p==0) return(0);
	while (*p) {
		if (*p++ == m)
			return(1);
	}
	return(0);
}
	/* the following are only used in the lex library */
#if defined(__cplusplus) || defined(__STDC__)
int yyinput(void)
#else
yyinput()
#endif
{
#ifndef __cplusplus
	return(input());
#else
	return(lex_input());
#endif
	}
#if defined(__cplusplus) || defined(__STDC__)
void yyoutput(int c)
#else
yyoutput(c)
  int c; 
#endif
{
#ifndef __cplusplus
	output(c);
#else
	lex_output(c);
#endif
	}
#if defined(__cplusplus) || defined(__STDC__)
void yyunput(int c)
#else
yyunput(c)
   int c; 
#endif
{
	unput(c);
	}

#pragma warning(pop)
