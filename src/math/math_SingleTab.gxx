// Copyright (c) 1997-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.


#include <math_Memory.hxx>
#include <Standard_OutOfRange.hxx>
#include <Standard_Failure.hxx>

// macro to get size of C array
#define CARRAY_LENGTH(arr) (int)(sizeof(arr)/sizeof(arr[0]))

math_SingleTab::math_SingleTab(const Standard_Integer LowerIndex,
		               const Standard_Integer UpperIndex) :
                   Addr(Buf),
                   isAllocated(UpperIndex - LowerIndex + 1 > CARRAY_LENGTH(Buf)),
			       First(LowerIndex), Last(UpperIndex)
{
  Item* TheAddr = !isAllocated? Buf :
    (Item*) Standard::Allocate((Last-First+1) * sizeof(Item));
  Addr = (Standard_Address) (TheAddr - First);
}

math_SingleTab::math_SingleTab(const Item& Tab,
			       const Standard_Integer LowerIndex,
			       const Standard_Integer UpperIndex) :
			       Addr((void*)(&Tab - LowerIndex)), 
			       isAllocated(Standard_False),
			       First(LowerIndex), Last(UpperIndex)
			       
{
}

void math_SingleTab::Init(const Item& InitValue)
{
  for (Standard_Integer i=First; i<= Last; i++) {
    ((Item*)Addr)[i] = InitValue;
  }
}


math_SingleTab::math_SingleTab(const math_SingleTab& Other) :

  isAllocated(Other.Last - Other.First + 1 > CARRAY_LENGTH(Buf)),
  First(Other.First),
  Last(Other.Last)

{
  Item* TheAddr = !isAllocated? Buf :
    (Item*) Standard::Allocate((Last-First+1) * sizeof(Item));
  Addr = (Standard_Address) (TheAddr - First);
  Item* TheOtherAddr = (Item*) Other.Addr;
  memmove((void*) TheAddr, (const void*) (TheOtherAddr + First),
	  (size_t)(Last - First + 1) * sizeof(Item));
}


void math_SingleTab::Free()
{
  if(isAllocated) {
    Standard_Address it = (Standard_Address)&((Item*)Addr)[First];
    Standard::Free(it);
    Addr = 0;
  }
}


void math_SingleTab::SetLower(const Standard_Integer LowerIndex)
{
  Item* TheAddr = (Item*) Addr;
  Addr = (Standard_Address) (TheAddr + First - LowerIndex);
  Last = Last - First + LowerIndex;
  First = LowerIndex;
}




