// Copyright (c) 1995-1999 Matra Datavision
// Copyright (c) 1999-2012 OPEN CASCADE SAS
//
// The content of this file is subject to the Open CASCADE Technology Public
// License Version 6.5 (the "License"). You may not use the content of this file
// except in compliance with the License. Please obtain a copy of the License
// at http://www.opencascade.org and read it completely before using this file.
//
// The Initial Developer of the Original Code is Open CASCADE S.A.S., having its
// main offices at: 1, place des Freres Montgolfier, 78280 Guyancourt, France.
//
// The Original Code and all software distributed under the License is
// distributed on an "AS IS" basis, without warranty of any kind, and the
// Initial Developer hereby disclaims all such warranties, including without
// limitation, any warranties of merchantability, fitness for a particular
// purpose or non-infringement. Please see the License for the specific terms
// and conditions governing the rights and limitations under the License.

//-- 
//-- Modif of 5 October 94 (LBR) 
//--   if(Trouve) ...
//-- outpasses a border, Duv[.] = -1 -1 -1 -1 
//-- keep the same iso limited (see if(k!=1) )
//-- 

//-- Modif of 8 July 96 (LBR)
//-- simplify processing of auto-intersections.
//-- Idea :  Test closed loop in 3d and in 2d. 
//-- 

#include <gp_Pnt2d.hxx>


Standard_Boolean IntWalk_PWalking::
        TestArret(const Standard_Boolean DejaReparti,
                  TColStd_Array1OfReal& Param,
                  IntImp_ConstIsoparametric&  ChoixIso)

//
// test if the point of intersection set by these parameters remains in the 
// natural domain of each square.
// if the point outpasses reframe to find the best iso (border)
// that intersects easiest the other square
// otherwise test if closed line is present  
// 
{
  Standard_Real Uvd[4],Uvf[4],Epsuv[4],Duv[4],Uvp[4],dv,dv2,ParC[4];
  Standard_Real DPc,DPb;
  Standard_Integer i = 0, k = 0;
  Epsuv[0] = ResoU1;
  Epsuv[1] = ResoV1;
  Epsuv[2] = ResoU2;
  Epsuv[3] = ResoV2;
  previousPoint.Parameters(Uvp[0],Uvp[1],Uvp[2],Uvp[3]);

  Standard_Real SolParam[4];
  myIntersectionOn2S.Point().Parameters(SolParam[0],SolParam[1],SolParam[2],SolParam[3]);

  Standard_Boolean Trouve = Standard_False;

  Uvd[0]=Um1;   Uvf[0]=UM1;   Uvd[1]=Vm1;   Uvf[1]=VM1;
  Uvd[2]=Um2;   Uvf[2]=UM2;   Uvd[3]=Vm2;   Uvf[3]=VM2;

  Standard_Integer im1;
  for ( i = 1,im1 = 0;i<=4;i++,im1++) {
    switch(i) { 
    case 1: k=2; break;
    case 2: k=1; break;
    case 3: k=4; break;
    case 4: k=3; break;
    }
    if (Param(i) < (Uvd[im1]-Epsuv[im1]) ||
        SolParam[im1] < (Uvd[im1]-Epsuv[im1]))     //--     Current -----  Bound Inf -----  Previous
    {
      Trouve    = Standard_True;                   //-- 
      DPc       = Uvp[im1]-Param(i);               //--     Previous  - Current
      DPb       = Uvp[im1]-Uvd[im1];               //--     Previous  - Bound Inf
      ParC[im1] = Uvd[im1];                        //--     ParamCorrige
      dv        = Param(k)-Uvp[k-1];               //--     Current   - Previous (other Direction)
      dv2       = dv*dv;         
      if(dv2>RealEpsilon()) {                       //--    Progress at the other Direction ?
	Duv[im1]  = DPc*DPb + dv2;
	Duv[im1]  = Duv[im1]*Duv[im1]/(DPc*DPc+dv2)/(DPb*DPb+dv2);
      }
      else {
	Duv[im1]=-1.0;                              //--    If no progress, do not change  
      }                                             //--    the choice of iso 
    }   
    else if (Param(i) > (Uvf[im1] + Epsuv[im1]) ||
             SolParam[im1] > (Uvf[im1] + Epsuv[im1]))//--    Previous -----  Bound Sup -----  Current
    {
      Trouve    = Standard_True;                    //-- 
      DPc       = Param(i)-Uvp[im1];                //--     Current   - Previous
      DPb       = Uvf[im1]-Uvp[im1];                //--     Bound Sup - Previous 
      ParC[im1] = Uvf[im1];                         //--     Param Corrige
      dv        = Param(k)-Uvp[k-1];                //--     Current   - Previous (other Direction)
      dv2       = dv*dv;
      if(dv2>RealEpsilon()) {                       //--     Progress in other Direction ?
	Duv[im1]  =  DPc*DPb + dv2;
	Duv[im1]  = Duv[im1]*Duv[im1]/(DPc*DPc+dv2)/(DPb*DPb+dv2);
      }
      else {
	Duv[im1]=-1.0;                              //--    If no progress, do not change 
      }                                             //--    the choice of iso 
    }
    else { 
      Duv[im1]= -1.;
      ParC[im1]=Param(i);
    }
  }

  if (Trouve) {
    //--------------------------------------------------
    //-- One of Parameters u1,v1,u2,v2 is outside of  --
    //-- the natural limits.                          -- 
    //-- Find the best direction of                   -- 
    //-- progress and reframe the parameters.        --
    //--------------------------------------------------
    Standard_Real ddv = -1.0;
    k=-1;
    for (i=0;i<=3;i++) {
      Param(i+1) = ParC[i];
      if(Duv[i]>ddv) { 
	ddv = Duv[i];
	k=i;
      }
    }
    if(k!=-1) { 
      ChoixIso   = ChoixRef[k];
    }
    else { 
      if((ParC[0]<=Uvd[0]+Epsuv[0]) || (ParC[0]>=Uvf[0]-Epsuv[0])) {
	ChoixIso = IntImp_UIsoparametricOnCaro1;
      }
      else if((ParC[1]<=Uvd[1]+Epsuv[1]) || (ParC[1]>=Uvf[1]-Epsuv[1])) {
	ChoixIso = IntImp_VIsoparametricOnCaro1;
      }
      else if((ParC[2]<=Uvd[2]+Epsuv[2]) || (ParC[2]>=Uvf[2]-Epsuv[2])) {
	ChoixIso = IntImp_UIsoparametricOnCaro2;
      }
      else if((ParC[3]<=Uvd[3]+Epsuv[3]) || (ParC[3]>=Uvf[3]-Epsuv[3])) {
	ChoixIso = IntImp_VIsoparametricOnCaro2;
      }
    }
    close = Standard_False;
    return Standard_True;
  }
  else 
    {  
      if (!DejaReparti) { // find if line closed

	Standard_Real u,v;
	const IntSurf_PntOn2S& POn2S1=line->Value(1);
        //On S1
	POn2S1.ParametersOnS1(u,v);
	gp_Pnt2d P1uvS1(u,v);
	previousPoint.ParametersOnS1(u,v);
	gp_Pnt2d PrevuvS1(u,v);
	myIntersectionOn2S.Point().ParametersOnS1(u,v);
	gp_Pnt2d myIntersuvS1(u,v);
	Standard_Boolean close2dS1 = (P1uvS1.XY()-PrevuvS1.XY())*
	  (P1uvS1.XY()-myIntersuvS1.XY()) < 0.0;
        //On S2
        POn2S1.ParametersOnS2(u,v);
        gp_Pnt2d P1uvS2(u,v);
        previousPoint.ParametersOnS2(u,v);
        gp_Pnt2d PrevuvS2(u,v);
        myIntersectionOn2S.Point().ParametersOnS2(u,v);
        gp_Pnt2d myIntersuvS2(u,v);
        Standard_Boolean close2dS2 = (P1uvS2.XY()-PrevuvS2.XY())*
          (P1uvS2.XY()-myIntersuvS2.XY()) < 0.0;

        close = close2dS1 && close2dS2;
        return close;
      }
      else return Standard_False;
    }
}


