// Created on: 2014-12-24
// Created by: Ilya Sevrikov
// Copyright (c) 2013-2014 OPEN CASCADE SAS
//
// This file is part of Open CASCADE Technology software library.
//
// This library is free software; you can redistribute it and/or modify it under
// the terms of the GNU Lesser General Public License version 2.1 as published
// by the Free Software Foundation, with special exception defined in the file
// OCCT_LGPL_EXCEPTION.txt. Consult the file LICENSE_LGPL_21.txt included in OCCT
// distribution for complete text of the license and disclaimer of any warranty.
//
// Alternatively, this file may be used under the terms of Open CASCADE
// commercial license or contractual agreement.

#include <Standard_Assert.hxx>

//========================================================================
//Function : Graphic3d_DenseVolumeData
//Purpose  :
//========================================================================
template<class T>
Graphic3d_DenseVolumeData<T>::Graphic3d_DenseVolumeData() : Graphic3d_VolumeData()
{
  //
}

//========================================================================
//Function : Graphic3d_DenseVolumeData
//Purpose  :
//========================================================================
template<class T>
Graphic3d_DenseVolumeData<T>::Graphic3d_DenseVolumeData (const BVH_Box3d&       theBounds,
                                                         const Standard_Integer theNbVoxX,
                                                         const Standard_Integer theNbVoxY,
                                                         const Standard_Integer theNbVoxZ)
: Graphic3d_VolumeData (theBounds,
                        theNbVoxX,
                        theNbVoxY,
                        theNbVoxZ)
{
  myVoxels = new VoxelArray (0, theNbVoxX * theNbVoxY * theNbVoxZ - 1);
}

//========================================================================
//Function : Graphic3d_DenseVolumeData
//Purpose  :
//========================================================================
template<class T>
Graphic3d_DenseVolumeData<T>::Graphic3d_DenseVolumeData (const BVH_Box3d&                      theBounds,
                                                         const Standard_Integer                theNbVoxX,
                                                         const Standard_Integer                theNbVoxY,
                                                         const Standard_Integer                theNbVoxZ,
                                                         const NCollection_Handle<VoxelArray>& theVoxels)
: Graphic3d_VolumeData (theBounds,
                        theNbVoxX,
                        theNbVoxY,
                        theNbVoxZ)
{
  Standard_ASSERT_RETURN (theVoxels->Length() == theNbVoxX * theNbVoxY * theNbVoxZ,
    "Error: Array size is not valid", /* none */);

  myVoxels = theVoxels;
}

//========================================================================
//Function : Init
//Purpose  :
//========================================================================
template<class T>
void Graphic3d_DenseVolumeData<T>::Init (const BVH_Box3d&       theBounds,
                                         const Standard_Integer theNbVoxX,
                                         const Standard_Integer theNbVoxY,
                                         const Standard_Integer theNbVoxZ)
{
  init (theBounds,
        theNbVoxX,
        theNbVoxY,
        theNbVoxZ);

  myVoxels = new VoxelArray (0, theNbVoxX * theNbVoxY * theNbVoxZ - 1);
}

//========================================================================
//Function : Init
//Purpose  :
//========================================================================
template<class T>
void Graphic3d_DenseVolumeData<T>::Init (const BVH_Box3d&                      theBounds,
                                         const Standard_Integer                theNbVoxX,
                                         const Standard_Integer                theNbVoxY,
                                         const Standard_Integer                theNbVoxZ,
                                         const NCollection_Handle<VoxelArray>& theVoxels)
{
  init (theBounds,
        theNbVoxX,
        theNbVoxY,
        theNbVoxZ);

  Standard_ASSERT_RETURN (theVoxels->Length() == theNbVoxX * theNbVoxY * theNbVoxZ,
    "Error: Array size is not valid", /* none */);

  myVoxels = theVoxels;
}

//========================================================================
//Function : ~Graphic3d_DenseVolumeData
//Purpose  :
//========================================================================
template<class T>
Graphic3d_DenseVolumeData<T>::~Graphic3d_DenseVolumeData()
{
  //
}

//========================================================================
//Function : SetData
//Purpose  :
//========================================================================
template<class T>
void Graphic3d_DenseVolumeData<T>::SetData (const NCollection_Handle<VoxelArray>& theData)
{
  Standard_ASSERT_RETURN (theVoxels->Length() == theNbVoxX * theNbVoxY * theNbVoxZ,
    "Error: Array size is not valid", /* none */);

  myVoxels = theData;
}